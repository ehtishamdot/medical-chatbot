generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Token {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  token String
}

enum UserRole {
  ASSISTANT
  DOCTOR
}

enum PhaseType {
  GENERAL
  DISEASE_SPECIFIC
}

model User {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  username           String      @unique
  email              String      @unique
  password           String
  specialty          String
  jobTitle           String
  placeOfWork        String
  licenseNumber      String?
  countryAndLanguage String
  countryOfPractice  String
  preferredLanguage  String
  role               UserRole
  queries            Query[]
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  Patient            Patient[]
  Specialty          Specialty[]
}

model Query {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  data      String
  isUser    Boolean
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Specialty {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  diseases           Disease[]
  generalPhases      Phase[]
  countryAndLanguage String
  addedByUser        User      @relation(fields: [addedByUserId], references: [id])
  addedByUserId      String    @db.ObjectId
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Disease {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  phases      Phase[]
  specialty   Specialty @relation(fields: [specialtyId], references: [id])
  specialtyId String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Phase {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  questions   Question[]
  phaseType   PhaseType
  specialtyId String?
  specialty   Specialty?  @relation(fields: [specialtyId], references: [id])
  disease     Disease?   @relation(fields: [diseaseId], references: [id])
  diseaseId   String?    @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Question {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  phaseId  String
  question String
  priority Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  phase Phase? @relation(fields: [phaseId], references: [id])
}

model Patient {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String   @unique
  gender         String
  dateOfBirth    DateTime
  phone          String
  address        String
  medicalHistory String
  addedByUser    User     @relation(fields: [addedByUserId], references: [id])
  addedByUserId  String   @db.ObjectId
}
