generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Token {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  token String
}

enum UserRole {
  ASSISTANT
  DOCTOR
}

enum PhaseType {
  GENERAL
  DISEASE_SPECIFIC
}

model User {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  username           String      @unique
  email              String      @unique
  password           String
  specialty          String
  jobTitle           String
  placeOfWork        String
  licenseNumber      String?
  countryAndLanguage String
  countryOfPractice  String
  preferredLanguage  String
  role               UserRole
  queries            Query[]
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  Patient            Patient[]
  Specialty          Specialty[]
  Assistant          Assistant[]
  history            History[]
}

model Assistant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  email     String   @unique
  role      UserRole
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Query {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  data      String
  isUser    Boolean
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Specialty {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  diseases           Disease[]
  generalPhases      Phase[]
  countryAndLanguage String
  addedByUser        User      @relation(fields: [addedByUserId], references: [id])
  addedByUserId      String    @db.ObjectId
  History            History[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Disease {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  phases      Phase[]
  specialty   Specialty @relation(fields: [specialtyId], references: [id])
  specialtyId String    @db.ObjectId
  History               History[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Phase {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  questions   Question[]
  phaseType   PhaseType
  specialtyId String?    @db.ObjectId //#TODO
  specialty   Specialty? @relation(fields: [specialtyId], references: [id])
  disease     Disease?   @relation(fields: [diseaseId], references: [id])
  diseaseId   String?    @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Question {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  phaseId  String        @db.ObjectId
  question String
  priority Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  phase Phase? @relation(fields: [phaseId], references: [id])
}

model Patient {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String     
  gender         String
  dateOfBirth    DateTime
  phone          String
  address        String
  medicalHistory String
  addedByUser    User       @relation(fields: [addedByUserId], references: [id])
  addedByUserId  String     @db.ObjectId
  Feedback       Feedback[]
  History        History[]
}

model Feedback {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId String   @db.ObjectId
  rating    Int
  comment   String?
  specialty String  
  phaseType   PhaseType
  diseaseName String?
  specialtyId String   @db.ObjectId
  diseaseId   String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model History {
  id                    String      @id @default(auto()) @map("_id") @db.ObjectId
  chatHistory           Json?
  penalty               Int?        @default(0)
  ragVecHit             Int?        @default(0)
  chatComplete          Boolean     @default(false)
  report                Json?
  specialtyName         String?
  diseaseName           String?


  userId              String      @db.ObjectId @map("userId")
  patientId             String      @db.ObjectId  
  specialtyId           String?     @db.ObjectId
  customBotId           String?     @db.ObjectId @map("diseaseId")

  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  user                  User?     @relation(fields: [userId], references: [id])
  customBot             Disease?  @relation(fields: [customBotId], references: [id])
  specialty             Specialty?  @relation(fields: [specialtyId], references: [id])
  patient               Patient     @relation(fields: [patientId], references: [id])

  @@map("History")
}